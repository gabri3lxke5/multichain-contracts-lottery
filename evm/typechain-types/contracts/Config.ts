/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ConfigInterface extends Interface {
  getFunction(
    nameOrSignature: "maxNumber" | "minNumber" | "nbNumbers"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ConfigUpdated"): EventFragment;

  encodeFunctionData(functionFragment: "maxNumber", values?: undefined): string;
  encodeFunctionData(functionFragment: "minNumber", values?: undefined): string;
  encodeFunctionData(functionFragment: "nbNumbers", values?: undefined): string;

  decodeFunctionResult(functionFragment: "maxNumber", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minNumber", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nbNumbers", data: BytesLike): Result;
}

export namespace ConfigUpdatedEvent {
  export type InputTuple = [
    nbNumbers: BigNumberish,
    minNumber: BigNumberish,
    maxNumber: BigNumberish
  ];
  export type OutputTuple = [
    nbNumbers: bigint,
    minNumber: bigint,
    maxNumber: bigint
  ];
  export interface OutputObject {
    nbNumbers: bigint;
    minNumber: bigint;
    maxNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Config extends BaseContract {
  connect(runner?: ContractRunner | null): Config;
  waitForDeployment(): Promise<this>;

  interface: ConfigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  maxNumber: TypedContractMethod<[], [bigint], "view">;

  minNumber: TypedContractMethod<[], [bigint], "view">;

  nbNumbers: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "maxNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nbNumbers"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ConfigUpdated"
  ): TypedContractEvent<
    ConfigUpdatedEvent.InputTuple,
    ConfigUpdatedEvent.OutputTuple,
    ConfigUpdatedEvent.OutputObject
  >;

  filters: {
    "ConfigUpdated(uint8,uint256,uint256)": TypedContractEvent<
      ConfigUpdatedEvent.InputTuple,
      ConfigUpdatedEvent.OutputTuple,
      ConfigUpdatedEvent.OutputObject
    >;
    ConfigUpdated: TypedContractEvent<
      ConfigUpdatedEvent.InputTuple,
      ConfigUpdatedEvent.OutputTuple,
      ConfigUpdatedEvent.OutputObject
    >;
  };
}
