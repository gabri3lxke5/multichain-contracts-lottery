/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace MetaTxReceiver {
  export type ForwardRequestStruct = {
    from: AddressLike;
    nonce: BigNumberish;
    data: BytesLike;
  };

  export type ForwardRequestStructOutput = [
    from: string,
    nonce: bigint,
    data: string
  ] & { from: string; nonce: bigint; data: string };
}

export interface MetaTxReceiverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "eip712Domain"
      | "metaTxGetNonce"
      | "metaTxPrepare"
      | "metaTxPrepareWithNonce"
      | "metaTxVerify"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;

  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metaTxGetNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "metaTxPrepare",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "metaTxPrepareWithNonce",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "metaTxVerify",
    values: [MetaTxReceiver.ForwardRequestStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaTxGetNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaTxPrepare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaTxPrepareWithNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metaTxVerify",
    data: BytesLike
  ): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MetaTxReceiver extends BaseContract {
  connect(runner?: ContractRunner | null): MetaTxReceiver;
  waitForDeployment(): Promise<this>;

  interface: MetaTxReceiverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  metaTxGetNonce: TypedContractMethod<[from: AddressLike], [bigint], "view">;

  metaTxPrepare: TypedContractMethod<
    [from: AddressLike, data: BytesLike],
    [[MetaTxReceiver.ForwardRequestStructOutput, string]],
    "view"
  >;

  metaTxPrepareWithNonce: TypedContractMethod<
    [from: AddressLike, data: BytesLike, nonce: BigNumberish],
    [[MetaTxReceiver.ForwardRequestStructOutput, string]],
    "view"
  >;

  metaTxVerify: TypedContractMethod<
    [req: MetaTxReceiver.ForwardRequestStruct, signature: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "metaTxGetNonce"
  ): TypedContractMethod<[from: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "metaTxPrepare"
  ): TypedContractMethod<
    [from: AddressLike, data: BytesLike],
    [[MetaTxReceiver.ForwardRequestStructOutput, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "metaTxPrepareWithNonce"
  ): TypedContractMethod<
    [from: AddressLike, data: BytesLike, nonce: BigNumberish],
    [[MetaTxReceiver.ForwardRequestStructOutput, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "metaTxVerify"
  ): TypedContractMethod<
    [req: MetaTxReceiver.ForwardRequestStruct, signature: BytesLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
  };
}
